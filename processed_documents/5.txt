 general guidelines coding style inspired evettdatastructuresstylereqshtml      major style elements contribute programs grades percentages parentheses element relative importance function decomposition important correct indentation function decomposition decompose programs smaller parts mainline wont cut common pitfalls novice programmers general rule thumb function consist lines code arbitrary learning exercise fit constraints modular coding bigger functions decomposition process occur end students bring code promising theyll split smaller functions theyre pointyou dont make program pretty decompose problem solution program starting design phase forcing design modularly functions beginning program faster easier debug easier read legos© tinkertoys© lots small pieces easy comprehend debug plug great stuff write code find function large variables time split function smaller parts indentation follow indentation style set textbook foundations basic rule curly brackets indent code inside brackets spaces amount consistent part program showing proper indentation int main string month int days default daysmonth cout enter month lowercase letters cin month days hath september april june november september month days cout endl february month days cout month days days endl return heres acceptable style int main string month int days default daysmonth cout enter month lowercase letters cin month days hath september april june november september month days cout endl february month days cout month days days endl return identifiers naming conventions note conventions differ slightly textbooks ive highlight differences variables parameters lowercase uppercase letters separate words identifier wanted variable size balloon youd sizeofballoon global variables variables capitalize letter prefix names gsizeofballoon constants caps underbars separate words sizeofballoon functionsmethods variables letter capitalized sizeofballoon class names functions comments biggy types comments explained remember purpose comments make code readily understandable trained programmer including wasteful spend time putting comments programs work folks code back work code comments file header comment top file feature comment briefly outlines contents purpose file history file date modification modifier include iostreamh include stringh illustrates cascaded ifelse statements calculates number days month string version history modified matt evett owen astrachan int main header comments class files header comments files involved describe public interface header file balloon class balloonh presents good part files header comment ifndef balloonh define balloonh class balloon manipulation simulated auto pilot written based idea dave reed modified modified matt evett changed header comments member function explanation ascendint height balloon ascends height parameter sequence burns burn raises altitude meters function header comments immediately definition function describe function pay attention describing parameters reference parameters altered function execution function header precondition postcondition lines precondition comment specifies preconditions exist function execute correctly relation predicate hold parameters global variables function postcondition comment function returns made reference parameters global variables usrtoolscsepubmattfoundationscodecrapscc bool getpointint point precondition point postcondition returns true point obtained winner returns false crapped int sum sum rolltwo sum point sum return sum point infunction comments local variables local variable declared separate line inline comment describing purpose subsection comments large functions rare generally place inline comment top subsection describing code comments indented code inline comments knowing lines comment trickiest aspect style art science comment lines code fairly selfexplanatory comment flowofcontrol statement function call code crapscc examples int main int iteration counter int gameswon number games won int simulations number games simulate promptrangeenter games simulate fork simulations simulated game wingame gameswon running simulations output results cout games simulations cout won gameswon cout doublegameswonsimulations endl return