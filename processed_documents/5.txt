general guidelines for coding style
inspired from evettdatastructuresstylereqshtml
     
the major style elements that contribute to your programs grades are
given
below the percentages in parentheses next to each element indicate its
relative importance thus function decomposition is twice as important
as
correct indentation
function decomposition 
you must decompose your programs
into smaller parts  one mainline wont cut it this is one of the
most
common pitfalls of novice programmers as a general rule of thumb no
function should consist of more than  lines of code  yes its
arbitrary but
think of it as a learning exercise by having to fit within such
constraints you will come to appreciate what modular coding does for
you
and when it is right to use bigger functions
the decomposition process does not occur at the very end some
students
bring code to me to look at promising that theyll split it into
smaller
functions when theyre done thats not the pointyou dont do this
just to make the program look pretty you want to
decompose the problem and your solution ie the program starting at
the
design phase by forcing yourself to design modularly ie use
functions from the
beginning your program will go together faster be easier to debug and
easier to read think legos© and tinkertoys© lots of small
pieces each
easy to comprehend and debug plug them together and you can get great
stuff
as you write code if you find a function becoming too large too
many
variables etc its probably time to split the function into smaller
parts
indentation 
follow the indentation style set forth in the course textbook or in
foundations the basic
rule is that whenever you use or could use curly brackets you indent
the
code inside the brackets by  or  spaces you may use a different
amount but
you should be consistent below is a part of a program showing proper
indentation
int main
string month
int days    default value of  daysmonth
cout  enter a month lowercase letters 
cin  month
days hath september april june and november
if september  month
days  
cout    endl
else if february  month
days  
cout  month   has   days   days  endl
return 
heres another acceptable style
int main
string month
int days    default value of  daysmonth
cout  enter a month lowercase letters 
cin  month
days hath september april june and november
if september  month 
days  
cout    endl
else if february  month 
days  
cout  month   has   days   days  endl
return 
identifiers naming conventions 
note that these conventions differ slightly from the textbooks ive
tried to highlight the differences below
variables and parameters should be lowercase  except
use uppercase letters to separate words within the identifier so if
you wanted to name a variable size of balloon youd use sizeofballoon 
global variables same as for variables but capitalize the
first letter even better you can prefix all such names with a g
for example gsizeofballoon  
constants use all caps and underbars to separate words for
example sizeofballoon  
functionsmethods as with variables but the first letter is capitalized 
for example sizeofballoon  
class names same as functions
comments
this is a biggy there are several types of comments and these are
explained below remember that the overall purpose of comments is to
make
your code readily understandable to a trained programmer including
yourself it may seem wasteful to spend the time putting comments into
your programs its not the more you work with other folks code the
more often you go back to work with your own old code the more you
will
appreciate comments
file header comment 
the top of each file should feature a comment that briefly outlines the
contents and purpose of the file also specify the history of the
file
the date of each modification and the name of the modifier for
example
include iostreamh
include stringh
illustrates cascaded ifelse statements calculates the number of
days in a month specified as a string
version history
modified by matt evett 
owen astrachan 
int main
etc
header comments of class h files 
like the header comments of other files but more involved you must
describe the public interface the header file for the
balloon class balloonh
presents a good example a part of that files header comment follows
ifndef balloonh
define balloonh
class for balloon manipulation using simulated auto pilot
written  based on an idea of dave reed
modified   
modified  by matt evett changed header comments
member function explanation
ascendint height balloon ascends to height specified by parameter
in a sequence of burns each burn raises the
altitude by  meters
etc
function header comments 
immediately above the definition of each function describe what each
function does pay particular attention to describing the parameters
especially if they are reference parameters that could be altered by
the
function execution
each function header must also contain a precondition and
postcondition
lines the precondition comment specifies the preconditions that must
exist for the
function to execute correctly usually this is a relation or predicate
that must hold on the parameters and global variables used by the
function the postcondition comment must specify what value the
function
returns and any changes that will be made to reference parameters and
global variables
the following example is taken from
usrtoolscsepubmattfoundationscodecrapscc
bool getpointint point
precondition   point  
postcondition returns true if point obtained winner
returns false if crapped out
int sum
do
sum  rolltwo
while sum  point  sum  
return sum  point
infunction comments 
local variables each local variable should be
declared on a separate line with an inline comment describing its
purpose 
subsection comments for large functions which
should be rare generally you may want to place an inline comment at
the top of a subsection describing what the code there does such
comments should be indented with the code 
inline comments knowing which lines to comment is
one of the trickiest aspect of style its really more of an art than
a science you should comment those lines of code that are not fairly
selfexplanatory at the least though you must comment every
flowofcontrol statement eg if  do 
while  for  and function call 
see code below also taken from crapscc for some examples
int main    int k				      iteration counter   int gameswon  			      number of games won   int simulations 			      number of games to simulate     promptrangeenter  games to simulate   fork k  simulations k	      for each simulated game          if wingame                  gameswon              after running all the simulations we output the results   cout   of games    simulations   cout    won        gameswon       cout  doublegameswonsimulations      endl   return  
