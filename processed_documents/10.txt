the porter stemming algorithm
this page was completely revised jan  the earlier edition is here 
this is the ‘official’ home page for distribution of the porter stemming
algorithm written and maintained by its author
martin porter 
the porter stemming algorithm or ‘porter stemmer’ is a process for removing
the commoner morphological and inflexional endings from words in english its
main use is as part of a term normalisation process that is usually done when
setting up information retrieval systems
history
the original stemming algorithm paper was written in  in the
computer laboratory cambridge england as part of a larger ir project and
appeared as chapter  of the final project report
cj van rijsbergen se robertson and mf porter  new models in
probabilistic information retrieval london british library british
library research and development report no 
with van rijsbergen’s encouragement it was also published in
mf porter  an algorithm
for suffix stripping program    pp −
and since then it has
been reprinted in
karen sparck jones and peter willet  readings in
information retrieval  san francisco morgan kaufmann isbn
the original stemmer was written in
bcpl 
a language once popular but now defunct for the first few years after  it
was distributed in its bcpl form via the medium of punched paper
tape versions in other languages soon began to appear and by  it
was being widely used quoted and adapted unfortunately there were numerous
variations in functionality among these versions and this web page was set up
primarily to ‘put the record straight’ and establish a definitive version for
distribution
encodings
the ansi c version that heads the table below is exactly equivalent to the original
bcpl version the bcpl version did however differ in three minor points from
the published algorithm and these are clearly marked in the downloadable ansi c version
they are discussed further below
this ansi c version may be regarded as definitive in that it
now acts as a better definition
of the algorithm than the original published paper
over the years i have received many encoding from other workers and they
are also presented below i have a reasonable confidence that all these versions
are correctly encoded
language
     author
     affiliation
    received
     notes
ansi c
     me
ansi c thread safe
     me
java
     me
perl
     me
perl
     daniel van balen
   
    oct 
     slightly faster
python
    vivake gupta
   
     jan 
   
csharp
     andré hazelwood
     the official web guide
     sep 
   
csharp net compliant
     leif azzopardi
     univerity of paisley scotland
     nov 
   
csharp again
     brad patton
     
    dec 
     more like standard
c code brad
common lisp
     steven m haflich
     franz inc
     mar 
   
ruby
     ray pereda
     
     jan 
     github link
visual basic vb
     navonil mustafee
     brunel university
     apr 
   
delphi
     jo rabin
   
     apr 
   
javascript
     ‘andargor’
     
     jul 
     substantial revisions by christopher mckenzie
visual basic vb net compliant
     christos attikos
     university of piraeus greece
     jan 
   
php
     richard heyes
     
     feb 
   
prolog
     philip brooks
     university of georgia
     oct 
   
haskell
     dmitry antonyuk
   
     nov 
   
tsql
     keith lubell
     
     may 
   
matlab
     juan carlos lopez
     california pacific medical center research institute
     sep 
   
tcl
     aris theodorakos
     ncsr demokritos
     nov 
   
d
     daniel truemper
     humboldtuniversitaet zu berlin
    may 
   
erlang   erlang 
     alden dima
     national institute of standards and technology gaithersburg md usa
    sep 
   
rebol
     dale k brearcliffe
   
    apr 
   
scala
     ken faulkner
   
    may 
   
sas
     antoine stpierre
     business researchers inc
    apr 
   
plugin vim script
     mitchell bowden
   
    may 
     github link
nodejs
     jed parsons
     
    may 
     github link
google go
     alex gonopolskiy
   
    oct 
     github link
awk
     gregory grefenstette
     
    jul 
   
clojure
     yushi wang
   
    mar 
     bitbucket link
rust
     do nhat minh
     nanyang technological university
    aug 
     github link
vala
     serge hulne
   
    sep 
   
mysql
     john carty
     enlighten jobs
    jan 
     github link
julia
     matías guzmán naranjo
   
    may 
     github link
flex
     zalán bodó
     babesbolyai university
    oct 
     zalan’s notes
r
     mohit makkar
     indian institute of technology delhi
    nov 
   
groovy
    dhaval dave
   
    june 
     github link
oorexx
    po jonsson
   
    july 
     sourceforge link
all these encodings of the algorithm can be used free of charge for any
purpose questions about the algorithms should be directed to their authors
and not to martin porter except when he is the author
to test the programs out
here is a sample vocabulary  megabytes
and the corresponding output 
email any comments suggestions
queries
points of difference from the published algorithm
there is an extra rule in step 
m logi  →  log
so
archaeology is equated with archaeological etc
the step  rule
m abli  →  able
is replaced by
m bli  →  ble
so possibly is equated with possible etc
the algorithm leaves alone strings of length  or  in any case a string of
length  will be unchanged if passed through the algorithm but strings of
length  might lose a final s  so as goes to a
and is to i 
these differences may have been present in the
program from which the published algorithm derived but at such a great
distance from the original publication it is now difficult to say
it must be emphasised that these differences are very small indeed compared to the
variations that have been observed in other encodings of the algorithm
status
the porter stemmer should be regarded as ‘frozen’ that is strictly defined
and not amenable to further modification as a stemmer it is slightly inferior
to the snowball
english
or porter stemmer which derives from it and which is
subjected to occasional improvements for practical work therefore the new
snowball stemmer is recommended the porter stemmer is appropriate to ir
research work involving stemming where the experiments need to be exactly
repeatable
common errors
historically the following shortcomings have been found in other encodings of
the stemming algorithm
the algorithm clearly explains that when a set of rules of the type
conditions  →  s
are presented together only one rule is applied
the one with the longest matching suffix s for the given word this
is true whether the rule succeeds or fails ie whether or not s
replaces s  despite this the rules are sometimes simply
applied in turn until either one of them succeeds or the list runs out
this leads to small errors in various places for example in the step  rules
mement  → 
mment  → 
ment  → 
to remove final
ement  ment and ent 
properly argument stems to argument  the longest matching
suffix is ment  then stem argu has measure m equal to 
and so ment will not be removed end of step  but if the three
rules are applied in turn then for suffix ent the stem argum
has measure m equal to  and ent gets removed
the more delicate rules are liable to misinterpretation perhaps
greater care was required in explaining them so
m and s or tion
is taken to mean
ms or tion
the former means that
taking off ion leaves a stem with measure greater than  ending
s or t  the latter means that taking off sion or
tion leaves a stem of measure greater than  a similar confusion
tends to arise in interpreting rule  b  to reduce final double l to
single l 
occasionally cruder errors have been seen for example the test for y being
consonant or vowel set up the wrong way round
it is interesting that although the published paper explains how to do the
tests on the strings s by a program switch on the last or last but
one letter many encodings fail to use this technique making them
much slower than they need be
faqs frequently asked questions
what is the licensing arrangement for this software
this question has become very popular recently the period − despite
the clear statment above that ‘‘all these encodings of the algorithm can be used
free of charge for any
purpose’’ the problem i think is that intellectual property has become such a
major issue that some more formal statement is expected so to restate it
the software is completely free for any purpose unless notes at the head of the
program text indicates otherwise which is rare in any case the
notes about licensing are never more restrictive than the bsd license
in every case where the software is not written by me martin porter this
licensing arrangement has been endorsed by the contributor and it is therefore
unnecessary to ask the contributor again to confirm it
i have not asked any contributors or their employers if they have them for
proofs that they have the right to distribute their software in this way
for anyone taking software from the
snowball
website the position is similar but simpler there all the software is issued
under the bsd license and for contributions not written by martin porter and
richard boulton we have again not asked the authors or the authors’
employers for proofs that they have such distribution rights
why is the stemmer not producing proper words
it is often taken to be a crude error that a stemming algorithm does not leave a
real word after removing the stem but the purpose of stemming is to bring
variant forms of a word together not to map a word onto its ‘paradigm’ form
and connected with this
why are there errors
the question normally comes in the form why should word x be stemmed to
x  when one would have expected it to be stemmed to x  it
is important to remember that the stemming algorithm cannot achieve
perfection on balance it will or may improve ir performance but in
individual cases it may sometimes make what are or what seem to be
errors of course this is a different matter from suggesting an additional rule
that might be included in the stemmer to improve its performance
